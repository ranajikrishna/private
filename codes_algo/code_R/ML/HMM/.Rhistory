w
head(pts)
w
head(pts)
head(pts)
w
w
w
head(pts)
k
head(pts)
View(pts)
View(pts)
View(pts)
View(pts)
View(pts)
k
k
View(pts)
source('~/myGitCode/ML/homeWorks/homeWork1/testPercep.R')
source('~/.active-rstudio-document')
source('~/myGitCode/ML/homeWorks/homeWork1/testPercep.R')
w
w
k
pts
pts
w
val[[2]]
val[[3]]
source('~/myGitCode/ML/homeWorks/homeWork1/testPercep.R')
pts
pts
pts
pts
source('~/myGitCode/ML/homeWorks/homeWork1/testPercep.R')
source('~/myGitCode/ML/homeWorks/homeWork1/testPercep.R')
store_prb
val[[3]]
source('~/myGitCode/ML/homeWorks/homeWork1/percepAlgo.R')
source('~/myGitCode/ML/homeWorks/homeWork1/testPercep.R')
source('~/.active-rstudio-document')
source('~/myGitCode/ML/homeWorks/homeWork1/testPercep.R')
source('~/myGitCode/ML/homeWorks/homeWork1/testPercep.R')
source('~/myGitCode/ML/homeWorks/homeWork1/testPercep.R')
source('~/myGitCode/ML/homeWorks/homeWork1/testPercep.R')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/myGitCode/ML/homeWorks/homeWork1/testPercep.R')
head(pts)
head(pts)
source('~/myGitCode/ML/homeWorks/homeWork1/testPercep.R')
source('~/myGitCode/ML/homeWorks/homeWork1/testPercep.R')
source('~/myGitCode/ML/homeWorks/homeWork1/testPercep.R')
source('~/myGitCode/ML/homeWorks/homeWork1/testPercep.R')
pts
q
source('~/myGitCode/ML/homeWorks/homeWork1/testPercep.R')
source('~/myGitCode/ML/homeWorks/homeWork1/testPercep.R')
source('~/myGitCode/ML/homeWorks/homeWork1/testPercep.R')
source('~/myGitCode/ML/homeWorks/homeWork1/testPercep.R')
source('~/myGitCode/ML/homeWorks/homeWork1/testPercep.R')
source('~/.active-rstudio-document')
source('~/myGitCode/ML/homeWorks/homeWork1/percepAlgo.R')
source('~/myGitCode/ML/homeWorks/homeWork1/percepAlgo.R')
source('~/myGitCode/ML/homeWorks/homeWork1/percepAlgo.R')
source('~/myGitCode/ML/homeWorks/homeWork1/testPercep.R')
source('~/myGitCode/ML/homeWorks/homeWork1/testPercep.R')
source('~/myGitCode/ML/homeWorks/homeWork1/testPercep.R')
source('~/myGitCode/ML/homeWorks/homeWork1/testPercep.R')
source('~/myGitCode/ML/homeWorks/homeWork1/testPercep.R')
source('~/myGitCode/ML/homeWorks/homeWork1/testPercep.R')
source('~/myGitCode/ML/homeWorks/homeWork1/testPercep.R')
source('~/myGitCode/ML/homeWorks/homeWork1/testPercep.R')
source('~/myGitCode/ML/homeWorks/homeWork1/testPercep.R')
source('~/myGitCode/ML/homeWorks/homeWork1/testPercep.R')
source('~/myGitCode/ML/homeWorks/homeWork1/testPercep.R')
source('~/myGitCode/ML/homeWorks/homeWork1/testPercep.R')
source('~/myGitCode/ML/homeWorks/homeWork1/testPercep.R')
source('~/myGitCode/ML/homeWorks/homeWork1/testPercep.R')
source('~/myGitCode/ML/homeWorks/homeWork1/testPercep.R')
source('~/myGitCode/ML/homeWorks/homeWork1/testPercep.R')
source('~/myGitCode/ML/homeWorks/homeWork1/testPercep.R')
source('~/myGitCode/ML/homeWorks/homeWork1/testPercep.R')
source('~/myGitCode/ML/homeWorks/homeWork1/testPercep.R')
source('~/myGitCode/ML/homeWorks/homeWork1/testPercep.R')
source('~/myGitCode/ML/homeWorks/homeWork1/testPercep.R')
source('~/myGitCode/ML/homeWorks/homeWork1/testPercep.R')
source('~/myGitCode/ML/homeWorks/homeWork1/testPercep.R')
source('~/myGitCode/ML/homeWorks/homeWork1/testPercep.R')
source('~/myGitCode/ML/homeWorks/homeWork1/testPercep.R')
source('~/myGitCode/ML/homeWorks/homeWork1/testPercep.R')
source('~/myGitCode/ML/homeWorks/homeWork1/testPercep.R')
log(0.03/2)
log(0.03/2)/(-2*0.05^2)
log(0.03/20)/(-2*0.05^2)
log(0.03/200)/(-2*0.05^2)
6+20+42+72+110+156+150+136+114+84+46+2
(6+20+42+72+110+156+150+136+114+84+46+2)/144
(6+20+42+72+110+156+150+136+114+84+46+2)
(6+20+42+72+110+156+150+136+114+84+46+12)/144
choose(5,0)+choose(5,1)+choose(5,2)+choose(5,3)+choose(5,4)
choose(6,4)+choose(6,2)+1
o.1*log(0.95/4)
0.1*log(0.95/4)
0.05^2/80
4*(400*1000)^(10)*exp(-(1/8)*0.05^(2)*400*1000)
exp(1)
4*(2*400*1000)^(10)*exp(-(1/8)*0.05^(2)*400*1000)
exp(-(1/8)*0.05^(2)*400*1000)
4*(2*400*1000)^(10)
4*(2*420*1000)^(10)*exp(-(1/8)*0.05^(2)*400*1000)
4*(2*440*1000)^(10)*exp(-(1/8)*0.05^(2)*400*1000)
4*(2*460*1000)^(10)*exp(-(1/8)*0.05^(2)*400*1000)
4*(2*N*1000)^(10)*exp(-(1/8)*0.05^(2)*N*1000)
N = 400
4*(2*N*1000)^(10)*exp(-(1/8)*0.05^(2)*N*1000)
N = 420
4*(2*N*1000)^(10)*exp(-(1/8)*0.05^(2)*N*1000)
N = 440
4*(2*N*1000)^(10)*exp(-(1/8)*0.05^(2)*N*1000)
N = 480
4*(2*N*1000)^(10)*exp(-(1/8)*0.05^(2)*N*1000)
N = 460
4*(2*N*1000)^(10)*exp(-(1/8)*0.05^(2)*N*1000)
4*(2*N*1000)^(10)*exp(-(1/8)*N*1000*0.05^2)
4*(N*1000)^(10)*exp(-(1/8)*N*1000*0.05^2)
N = 460
4*(N*1000)^(10)*exp(-(1/8)*N*1000*0.05^2)
4*(2*N*1000)^(10)*exp(-(1/8)*N*1000*0.05^2)
N = 420
4*(2*N*1000)^(10)*exp(-(1/8)*N*1000*0.05^2)
N = 440
4*(2*N*1000)^(10)*exp(-(1/8)*N*1000*0.05^2)
N = 460
4*(2*N*1000)^(10)*exp(-(1/8)*N*1000*0.05^2)
N = 480
4*(2*N*1000)^(10)*exp(-(1/8)*N*1000*0.05^2)
N = 400
4*(2*N*1000)^(10)*exp(-(1/8)*N*1000*0.05^2)
N = 460
0.95-4*(2*N*1000)^(10)*exp(-(1/8)*N*1000*0.05^2)
N = 440
0.95-4*(2*N*1000)^(10)*exp(-(1/8)*N*1000*0.05^2)
N = 460
1-4*(2*N*1000)^(10)*exp(-(1/8)*N*1000*0.05^2)
1-0.95
source('~/.active-rstudio-document')
head(dataIn)
head(YIn)
head(XIn)
head(YIn)
head(permuted.ind)
v
wo+eta*(YIn[j] * XIn[j,]) / (1 + exp(YIn[j] * (XIn[j,] %*% w0)));
w0+eta*(YIn[j] * XIn[j,]) / (1 + exp(YIn[j] * (XIn[j,] %*% w0)));
w
j
w
XIn[j,]
head(XIn)
w0
w
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
w0
w
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
q
q
q
q
q
q
q
q
source('~/.active-rstudio-document')
w
w0
norm(w-w0)
fnorm(w-w0)
normf(w-w0)
norm(w-w0,'fro')
norm(w-w0,"F")
head(nEpoc)
head(nEpochs)
head(outX1.ind)
head(outCoords)
dim(outCoords)
size(outCoords)
head(outX1)
head(outX2)
head(dataOut)
head(dataOut)
head(YOut)
nOut
eOut
w
w0
nEpoch
head(nEpochs)
head(nEpochs)
q
q
source('~/.active-rstudio-document')
head(nEpochs)
head(avgEOut)
source('~/.active-rstudio-document')
avgEOut
avgNEpoch
source('~/.active-rstudio-document')
avgEOut
avgNEpoch
source('~/myGitCode/ML/homeWorks/homeWork5/question8_i.R')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/myGitCode/ML/homeWorks/homeWork5/question8_i.R')
source('~/myGitCode/ML/homeWorks/homeWork5/question8_i.R')
head(training_data)
perm
N
w
source('~/.active-rstudio-document')
source('~/myGitCode/ML/homeWorks/homeWork5/question8_i.R')
head(training_data)
12*6.5 + 15*8.95
source('~/myGitCode/hipMunk/onsite.R', echo=TRUE)
source('~/myGitCode/hipMunk/onsite.R', echo=TRUE)
source('~/myGitCode/hipMunk/onsite.R', echo=TRUE)
source('~/myGitCode/hipMunk/onsite.R', echo=TRUE)
posA
posB
medA
medB
retListA
retListB
posA
posB
medA
medB
retListA
retListB
posA
a
b
median(1,2,3)
median(c(1,2,3))
median(c(1,3))
median(c(1,4))
source('~/myGitCode/hipMunk/onsite.R', echo=TRUE)
tmpListA
tmpListB
tmpListA
tmpListB
posA
posB
medA
medB
source('~/myGitCode/hipMunk/onsite.R', echo=TRUE)
tmpListA
tmpListB
merge(tmpListA,tmpListB)
c(tmpListA,tmpListB)
median(c(tmpListA,tmpListB))
source('~/myGitCode/hipMunk/onsite.R', echo=TRUE)
source('~/myGitCode/hipMunk/onsite.R', echo=TRUE)
source('~/myGitCode/hipMunk/onsite.R', echo=TRUE)
tmpListA
source('~/myGitCode/hipMunk/onsite.R', echo=TRUE)
source('~/myGitCode/hipMunk/onsite.R', echo=TRUE)
median(c(tmpListA,tmpListB))
source('~/myGitCode/hipMunk/onsite.R', echo=TRUE)
median(c(tmpListA,tmpListB))
source('~/myGitCode/hipMunk/onsite.R', echo=TRUE)
source('~/myGitCode/hipMunk/onsite.R', echo=TRUE)
source('~/myGitCode/hipMunk/onsite.R', echo=TRUE)
source('~/myGitCode/hipMunk/onsite.R', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/myGitCode/hipMunk/onsite.R', echo=TRUE)
source('~/myGitCode/hipMunk/onsite.R', echo=F)
source('~/myGitCode/hipMunk/onsite.R', echo=F)
source('~/myGitCode/hipMunk/onsite.R', echo=TRUE)
source('~/myGitCode/hipMunk/onsite.R', echo=F)
source('~/myGitCode/hipMunk/onsite.R', echo=F)
sample(1:10,1)
sample(1:10,1)
sample(1:10,3)
sample(1:100,3)
sort(sample(1:100,3))
sort(sample(1:100,3))
sort(sample(1:100,3))
source('~/myGitCode/hipMunk/onsite.R', echo=TRUE)
source('~/myGitCode/hipMunk/onsite.R', echo=TRUE)
source('~/myGitCode/hipMunk/onsite.R', echo=F)
a
b
median(c(a,b))
c(a,b)
sort(c(a,b))
65+71
0.5(65+71)
0.5*(65+71)
source('~/myGitCode/hipMunk/onsite.R', echo=TRUE)
tmpListA
tmpListB
median(c(tmpListA,tmpListB))
a
b
median(c(a,b))
source('~/myGitCode/hipMunk/onsite.R', echo=TRUE)
tmpListA
tmpListB
medA
medB
retListA
retListB
medA
medB
retListA
retListB
retListA
retListB
source('~/myGitCode/hipMunk/onsite.R', echo=TRUE)
source('~/myGitCode/hipMunk/onsite.R', echo=TRUE)
q
source('~/myGitCode/hipMunk/onsite.R', echo=TRUE)
source('~/myGitCode/hipMunk/onsite.R', echo=TRUE)
a
b
median(c(a,b))
sort(c(a,b))
source('~/myGitCode/hipMunk/onsite.R', echo=TRUE)
source('~/myGitCode/hipMunk/onsite.R', echo=TRUE)
source('~/myGitCode/hipMunk/onsite.R', echo=TRUE)
source('~/myGitCode/hipMunk/onsite.R', echo=TRUE)
median(c(a,b))
source('~/myGitCode/hipMunk/onsite.R', echo=TRUE)
median(c(a,b))
sort(c(a,b))
source('~/myGitCode/codesAlgo/myCodeR/bubble_sort.R', echo=TRUE)
a = c(3,4,2,5,7)
bubble_sort(a)
source('~/myGitCode/codesAlgo/myCodeR/bubble_sort.R', echo=TRUE)
tmpArray
source('~/myGitCode/codesAlgo/myCodeR/bubble_sort.R', echo=TRUE)
duplet
source('~/myGitCode/codesAlgo/myCodeR/bubble_sort.R', echo=TRUE)
tmpArray[[1]][i:(i+1)]
i
tmpArray[[1]]
tmpArray[[1]][1]
source('~/myGitCode/codesAlgo/myCodeR/bubble_sort.R', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
b
a
source('~/myGitCode/codesAlgo/myCodeR/bubble_sort.R', echo=TRUE)
duplet
duplet
source('~/myGitCode/codesAlgo/myCodeR/bubble_sort.R', echo=TRUE)
duplet
tmpList
tmpArray
i
duplet
tmpArray
tmpArray
tmpArray
source('~/myGitCode/codesAlgo/myCodeR/bubble_sort.R', echo=TRUE)
tmpArray
newArray
newArray
newArray
newArray
tmpArray
source('~/myGitCode/codesAlgo/myCodeR/quick_sort.R', echo=TRUE)
a
dim(a)
a <- as.array(round(runif(10,0,10)))
dim(a)
source('~/myGitCode/codesAlgo/myCodeR/quick_sort.R', echo=TRUE)
tmpArray
st
ed
source('~/myGitCode/codesAlgo/myCodeR/quick_sort.R', echo=F)
tmpArray
pvt
source('~/myGitCode/codesAlgo/myCodeR/quick_sort.R', echo=TRUE)
source('~/myGitCode/codesAlgo/myCodeR/quick_sort.R', echo=TRUE)
tmpArray
tmpArray
tmpArray
tmpArray
tmpArray
tmpArray
tmpArray
tmpArray
tmpArray
st
int1
source('~/myGitCode/codesAlgo/myCodeR/quick_sort.R', echo=F)
int1
st
tmpArray
tmpArray
tmpArray
source('~/myGitCode/codesAlgo/myCodeR/quick_sort.R', echo=TRUE)
j
tmpArray
strArray
source('~/myGitCode/codesAlgo/myCodeR/quick_sort.R', echo=TRUE)
source('~/myGitCode/codesAlgo/myCodeR/quick_sort.R', echo=TRUE)
st
ed
source('~/myGitCode/codesAlgo/myCodeR/my_union.R', echo=TRUE)
source('~/myGitCode/codesAlgo/myCodeR/my_union.R', echo=TRUE)
source('~/myGitCode/codesAlgo/myCodeR/my_union.R', echo=TRUE)
source('~/myGitCode/codesAlgo/myCodeR/my_union.R', echo=TRUE)
source('~/myGitCode/codesAlgo/myCodeR/my_union.R', echo=TRUE)
source('~/myGitCode/codesAlgo/myCodeR/my_union.R', echo=F)
source('~/myGitCode/codesAlgo/myCodeR/my_union.R', echo=TRUE)
source('~/myGitCode/codesAlgo/myCodeR/my_union.R', echo=TRUE)
source('~/myGitCode/codesAlgo/myCodeR/my_union.R', echo=F)
source('~/myGitCode/codesAlgo/myCodeR/my_union.R', echo=TRUE)
source('~/myGitCode/codesAlgo/myCodeR/my_union.R', echo=F)
source('~/myGitCode/codesAlgo/myCodeR/my_union.R', echo=F)
source('~/myGitCode/codesAlgo/myCodeR/my_union.R', echo=F)
source('~/myGitCode/codesAlgo/myCodeR/my_union.R', echo=F)
source('~/myGitCode/codesAlgo/myCodeR/my_union.R', echo=F)
source('~/myGitCode/codesAlgo/myCodeR/my_union.R', echo=F)
source('~/myGitCode/codesAlgo/myCodeR/my_union.R', echo=F)
source('~/myGitCode/codesAlgo/myCodeR/my_union.R', echo=F)
a = 1
a +=1
a += 1
source('~/myGitCode/codesAlgo/myCodeR/check_sum.R', echo=TRUE)
source('~/myGitCode/codesAlgo/myCodeR/check_sum.R', echo=F)
source('~/myGitCode/codesAlgo/myCodeR/check_sum.R', echo=TRUE)
source('~/myGitCode/codesAlgo/myCodeR/check_sum.R', echo=TRUE)
rnorm(1000)
mean(rnorm(1000))
mean(rnorm(10000))
mean(rnorm(10000)^2)
mean(rnorm(100000)^2)
var(rnorm(100000)^2)
var(rnorm(1000000)^2)
2^10
1/2^10
100/2^10
source('~/myGitCode/myProj/myCodeR/ML/HMM/idenChange.R', echo=TRUE)
window()
Window()
Window
window
source('~/myGitCode/myProj/myCodeR/ML/HMM/idenChange.R', echo=TRUE)
source('~/myGitCode/myProj/myCodeR/ML/HMM/idenChange.R', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/myGitCode/myProj/myCodeR/ML/HMM/idenChange.R', echo=TRUE)
head(TSData)
source('~/myGitCode/myProj/myCodeR/ML/HMM/idenChange.R', echo=TRUE)
source('~/myGitCode/myProj/myCodeR/ML/HMM/idenChange.R', echo=TRUE)
head(ATRindicator)
ATR
help(ATR)
head(ATRindicator)
head(TSData)
tail(ATRindicator)
tail(ATRindicator)[1]
tail(ATRindicator)[1][3]
tail(ATRindicator)[1,3]
tail(ATRindicator)[1,3]-tail(ATRindicator)[1,4]
head(TSData)
LogReturns <- log(EURUSD1d$Close) - log(EURUSD1d$Open) # Calculate the logarithmic returns
plot(LogReturns)
plot(LogReturns,t='c')
plot(LogReturns,t='l')
head(ATR)
ModelData<-data.frame(LogReturns,ATR) #create the data frame for our HMM model
ModelData<-data.frame(LogReturns,ATR)                  # Create the data frame for our HMM model
head(ModelData)
tail(ModelData)
ModelData<-ModelData[-c(1:14),]                 # Remove the data where the indicators are being calculated
tail(ModelData)
head(ModelData)
plot(ModelData$atr,t='l')
HMM<-depmix(list(LogReturns~1,ATR~1),data=ModelData,nstates=3,family=list(gaussian(),gaussian()))
# We’re setting the LogReturns and ATR as our response variables, using the data frame we just built,
# want to set 3 different regimes, and setting the response distributions to be gaussian.
HMM
colnames(ModelData)
colnames(ModelData)<-c("LogReturns","ATR") #name our columns
colnames(ModelData)
set.seed(1)
HMM<-depmix(list(LogReturns~1,ATR~1),data=ModelData,nstates=3,family=list(gaussian(),gaussian()))
HMM
HMMfit<-fit(HMM, verbose = FALSE) # Fit our model to the data set.
HMM
HMMfit
summary(HMMfit)
HMMpost<-posterior(HMMfit)        # Find the posterior odds for each state over our data set
HMMpost
summary(HMMfit)
source('~/myGitCode/myProj/myCodeR/ML/HMM/tutorial.R')
source('~/myGitCode/myProj/myCodeR/ML/HMM/idenChange.R')
Hmm
HMM
HMMfit
summary(HMM)
summary(HMMfit)
q
